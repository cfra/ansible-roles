#
# Ansible managed
#

#
# Command definitions
#

object NotificationCommand "page-host-notification" {
    import "plugin-notification-command"

    command = [ SysconfDir + "/icinga2/scripts/page-service-notification.py" ]
    env = {
        NOTIFICATIONTYPE = "$notification.type$"
        SERVICEDISPLAYNAME = "$host.display_name$"
        SERVICEOUTPUT = "$host.output$"
        USERPAGER = "$user.pager$"
    }
}

object NotificationCommand "page-service-notification" {
    import "plugin-notification-command"

    command = [ SysconfDir + "/icinga2/scripts/page-service-notification.py" ]
    env = {
        NOTIFICATIONTYPE = "$notification.type$"
        SERVICEDISPLAYNAME = "$service.display_name$"
        SERVICEOUTPUT = "$service.output$"
        USERPAGER = "$user.pager$"
    }
}

object CheckCommand "ifstatus_ifindex" {
    import "plugin-check-command"

    command = [ PluginDir + "/check_ifoperstatus" ]
    arguments = {
         "-H" = "$address$"
         "-C" = "$snmp_community$"
         "-k" = "$ifindex$"
    }
}

object CheckCommand "nanostation_ap" {
    import "plugin-check-command"

    command = [ PluginDir + "/check_nanostation_signal" ]
    arguments = {
         "-H" = "$address$"
         "-C" = "$snmp_community$"
         "-w" = "$signal_warn$"
         "-c" = "$signal_crit$"
    }
}

object CheckCommand "envmon" {
    import "plugin-check-command"

    command = [ PluginDir + "/check_env" ]
    arguments = {
         "-H" = "$address$"
         "-w" = "$env_tempwarn$"
         "-c" = "$env_tempcrit$"
         "-dw" = "$env_dewwarn$"
         "-dc" = "$env_dewcrit$"
    }
}

object CheckCommand "graphite_metric" {
    import "plugin-check-command"

    command = [ PluginDir + "/check_graphite" ]
    arguments = {
        "-H" = "$address$"
        "-t" = "$graphite_target$"
        "-w" = "$graphite_warn$"
        "-c" = "$graphite_crit$"
    }
}

object CheckCommand "oxidized" {
    import "plugin-check-command"

    command = [ PluginDir + "/check_oxidized" ]
    arguments = {
        "-H" = {
            value = "$oxidized_ip$"
            skip_key = true
        },
        "-n" = {
            value = "$node_ip$"
            skip_key = true
        }
    }
}

#
# Notification setup
#

template Notification "page-host-notification" {
  command = "page-host-notification"

  states = [ Up, Down ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "page-service-notification" {
    command = "page-service-notification"

    states = [ OK, Warning, Critical, Unknown ]
    types = [ Problem, Acknowledgement, Recovery, Custom,
              FlappingStart, FlappingEnd,
              DowntimeStart, DowntimeEnd, DowntimeRemoved ]
    period = "24x7"
}

apply Notification "page-icingaadmin" to Host {
  import "page-host-notification"

  user_groups = host.vars.notification.pager.groups
  users = host.vars.notification.pager.users

  assign where host.vars.notification.pager
}


apply Notification "page-icingaadmin" to Service {
    import "page-service-notification"

    user_groups = service.vars.notification.pager.groups
    users = service.vars.notification.pager.users

    assign where service.vars.notification.pager
}

apply Notification "page-icingaadmin" to Service {
    import "page-service-notification"

    user_groups = host.vars.notification.pager.groups
    users = host.vars.notification.pager.users

    assign where host.vars.notification.pager
    ignore where service.vars.notification.pager
}

#
# Dependency Setup
#

apply Dependency "parent" to Host {
    parent_host_name = host.vars.parent
    assign where host.vars.parent != ""
}
